/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.node;

import mysqlgrm.analysis.*;

@SuppressWarnings("nls")
public final class ACreateClausel extends PCreateClausel
{
    private TCreate _create_;
    private TTable _table_;
    private TIf _if_;
    private TNot _not_;
    private TExists _exists_;
    private TIdentifier _identifier_;
    private PTableDefinition _tableDefinition_;

    public ACreateClausel()
    {
        // Constructor
    }

    public ACreateClausel(
        @SuppressWarnings("hiding") TCreate _create_,
        @SuppressWarnings("hiding") TTable _table_,
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TNot _not_,
        @SuppressWarnings("hiding") TExists _exists_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PTableDefinition _tableDefinition_)
    {
        // Constructor
        setCreate(_create_);

        setTable(_table_);

        setIf(_if_);

        setNot(_not_);

        setExists(_exists_);

        setIdentifier(_identifier_);

        setTableDefinition(_tableDefinition_);

    }

    @Override
    public Object clone()
    {
        return new ACreateClausel(
            cloneNode(this._create_),
            cloneNode(this._table_),
            cloneNode(this._if_),
            cloneNode(this._not_),
            cloneNode(this._exists_),
            cloneNode(this._identifier_),
            cloneNode(this._tableDefinition_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACreateClausel(this);
    }

    public TCreate getCreate()
    {
        return this._create_;
    }

    public void setCreate(TCreate node)
    {
        if(this._create_ != null)
        {
            this._create_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._create_ = node;
    }

    public TTable getTable()
    {
        return this._table_;
    }

    public void setTable(TTable node)
    {
        if(this._table_ != null)
        {
            this._table_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._table_ = node;
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TNot getNot()
    {
        return this._not_;
    }

    public void setNot(TNot node)
    {
        if(this._not_ != null)
        {
            this._not_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._not_ = node;
    }

    public TExists getExists()
    {
        return this._exists_;
    }

    public void setExists(TExists node)
    {
        if(this._exists_ != null)
        {
            this._exists_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exists_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PTableDefinition getTableDefinition()
    {
        return this._tableDefinition_;
    }

    public void setTableDefinition(PTableDefinition node)
    {
        if(this._tableDefinition_ != null)
        {
            this._tableDefinition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tableDefinition_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._create_)
            + toString(this._table_)
            + toString(this._if_)
            + toString(this._not_)
            + toString(this._exists_)
            + toString(this._identifier_)
            + toString(this._tableDefinition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._create_ == child)
        {
            this._create_ = null;
            return;
        }

        if(this._table_ == child)
        {
            this._table_ = null;
            return;
        }

        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._not_ == child)
        {
            this._not_ = null;
            return;
        }

        if(this._exists_ == child)
        {
            this._exists_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._tableDefinition_ == child)
        {
            this._tableDefinition_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._create_ == oldChild)
        {
            setCreate((TCreate) newChild);
            return;
        }

        if(this._table_ == oldChild)
        {
            setTable((TTable) newChild);
            return;
        }

        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._not_ == oldChild)
        {
            setNot((TNot) newChild);
            return;
        }

        if(this._exists_ == oldChild)
        {
            setExists((TExists) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._tableDefinition_ == oldChild)
        {
            setTableDefinition((PTableDefinition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
