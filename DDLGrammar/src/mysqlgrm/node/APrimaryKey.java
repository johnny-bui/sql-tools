/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.node;

import mysqlgrm.analysis.*;

@SuppressWarnings("nls")
public final class APrimaryKey extends PPrimaryKey
{
    private TConstraint _constraint_;
    private TIdentifier _name_;
    private TPrimary _primary_;
    private TKey _key_;
    private TLPar _lPar_;
    private TIdentifier _col_;
    private TRPar _rPar_;

    public APrimaryKey()
    {
        // Constructor
    }

    public APrimaryKey(
        @SuppressWarnings("hiding") TConstraint _constraint_,
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") TPrimary _primary_,
        @SuppressWarnings("hiding") TKey _key_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") TIdentifier _col_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setConstraint(_constraint_);

        setName(_name_);

        setPrimary(_primary_);

        setKey(_key_);

        setLPar(_lPar_);

        setCol(_col_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new APrimaryKey(
            cloneNode(this._constraint_),
            cloneNode(this._name_),
            cloneNode(this._primary_),
            cloneNode(this._key_),
            cloneNode(this._lPar_),
            cloneNode(this._col_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrimaryKey(this);
    }

    public TConstraint getConstraint()
    {
        return this._constraint_;
    }

    public void setConstraint(TConstraint node)
    {
        if(this._constraint_ != null)
        {
            this._constraint_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._constraint_ = node;
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TPrimary getPrimary()
    {
        return this._primary_;
    }

    public void setPrimary(TPrimary node)
    {
        if(this._primary_ != null)
        {
            this._primary_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._primary_ = node;
    }

    public TKey getKey()
    {
        return this._key_;
    }

    public void setKey(TKey node)
    {
        if(this._key_ != null)
        {
            this._key_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._key_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public TIdentifier getCol()
    {
        return this._col_;
    }

    public void setCol(TIdentifier node)
    {
        if(this._col_ != null)
        {
            this._col_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._col_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._constraint_)
            + toString(this._name_)
            + toString(this._primary_)
            + toString(this._key_)
            + toString(this._lPar_)
            + toString(this._col_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._constraint_ == child)
        {
            this._constraint_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._primary_ == child)
        {
            this._primary_ = null;
            return;
        }

        if(this._key_ == child)
        {
            this._key_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._col_ == child)
        {
            this._col_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._constraint_ == oldChild)
        {
            setConstraint((TConstraint) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._primary_ == oldChild)
        {
            setPrimary((TPrimary) newChild);
            return;
        }

        if(this._key_ == oldChild)
        {
            setKey((TKey) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._col_ == oldChild)
        {
            setCol((TIdentifier) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
