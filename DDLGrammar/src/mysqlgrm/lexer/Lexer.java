/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.lexer;

import java.io.*;
import mysqlgrm.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLPar(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRPar(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFloatingPointNumber(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntegerNumber(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInteger(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBigint(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFloat(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTimestamp(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVarchar(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCreate(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTable(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExists(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TConstraint(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TForeign(text, line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPrimary(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKey(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnique(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNot(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNull(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReferences(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDrop(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTruncate(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInsert(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInto(text, line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TValues(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVar(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStringLiteral(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {44, 44, 8}, {48, 57, 9}, {59, 59, 10}, {64, 64, 11}, {65, 65, 12}, {66, 66, 13}, {67, 67, 14}, {68, 68, 15}, {69, 69, 16}, {70, 70, 17}, {71, 72, 12}, {73, 73, 18}, {74, 74, 12}, {75, 75, 19}, {76, 77, 12}, {78, 78, 20}, {79, 79, 12}, {80, 80, 21}, {81, 81, 12}, {82, 82, 22}, {83, 83, 12}, {84, 84, 23}, {85, 85, 24}, {86, 86, 25}, {87, 90, 12}, {96, 96, 26}, {97, 97, 12}, {98, 98, 27}, {99, 99, 28}, {100, 100, 29}, {101, 101, 30}, {102, 102, 31}, {103, 104, 12}, {105, 105, 32}, {106, 106, 12}, {107, 107, 33}, {108, 109, 12}, {110, 110, 34}, {111, 111, 12}, {112, 112, 35}, {113, 113, 12}, {114, 114, 36}, {115, 115, 12}, {116, 116, 37}, {117, 117, 38}, {118, 118, 39}, {119, 122, 12}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{0, 9, 40}, {11, 12, 40}, {14, 33, 40}, {34, 34, 41}, {35, 91, 40}, {92, 92, 42}, {93, 65535, 40}, },
            {},
            {},
            {},
            {{46, 46, 43}, {48, 57, 9}, },
            {},
            {{48, 57, 44}, {65, 90, 45}, {95, 95, 46}, {97, 122, 45}, },
            {{48, 57, 47}, {65, 90, 48}, {95, 95, 49}, {97, 122, 48}, },
            {{48, 57, 47}, {65, 72, 48}, {73, 73, 50}, {74, 90, 48}, {95, 95, 49}, {97, 104, 48}, {105, 105, 51}, {106, 122, 48}, },
            {{48, 57, 47}, {65, 78, 48}, {79, 79, 52}, {80, 81, 48}, {82, 82, 53}, {83, 90, 48}, {95, 95, 49}, {97, 110, 48}, {111, 111, 54}, {112, 113, 48}, {114, 114, 55}, {115, 122, 48}, },
            {{48, 57, 47}, {65, 81, 48}, {82, 82, 56}, {83, 95, -16}, {97, 113, 48}, {114, 114, 57}, {115, 122, 48}, },
            {{48, 57, 47}, {65, 87, 48}, {88, 88, 58}, {89, 90, 48}, {95, 95, 49}, {97, 119, 48}, {120, 120, 59}, {121, 122, 48}, },
            {{48, 57, 47}, {65, 75, 48}, {76, 76, 60}, {77, 78, 48}, {79, 79, 61}, {80, 90, 48}, {95, 95, 49}, {97, 107, 48}, {108, 108, 62}, {109, 110, 48}, {111, 111, 63}, {112, 122, 48}, },
            {{48, 57, 47}, {65, 69, 48}, {70, 70, 64}, {71, 77, 48}, {78, 78, 65}, {79, 90, 48}, {95, 95, 49}, {97, 101, 48}, {102, 102, 66}, {103, 109, 48}, {110, 110, 67}, {111, 122, 48}, },
            {{48, 57, 47}, {65, 68, 48}, {69, 69, 68}, {70, 90, 48}, {95, 95, 49}, {97, 100, 48}, {101, 101, 69}, {102, 122, 48}, },
            {{48, 78, -16}, {79, 79, 70}, {80, 84, 48}, {85, 85, 71}, {86, 90, 48}, {95, 110, -16}, {111, 111, 72}, {112, 116, 48}, {117, 117, 73}, {118, 122, 48}, },
            {{48, 81, -17}, {82, 82, 74}, {83, 113, -17}, {114, 114, 75}, {115, 122, 48}, },
            {{48, 68, -21}, {69, 69, 76}, {70, 100, -21}, {101, 101, 77}, {102, 122, 48}, },
            {{48, 57, 47}, {65, 65, 78}, {66, 72, 48}, {73, 73, 79}, {74, 81, 48}, {82, 82, 80}, {83, 95, -16}, {97, 97, 81}, {98, 104, 48}, {105, 105, 82}, {106, 113, 48}, {114, 114, 83}, {115, 122, 48}, },
            {{48, 57, 47}, {65, 77, 48}, {78, 78, 84}, {79, 95, -20}, {97, 109, 48}, {110, 110, 85}, {111, 122, 48}, },
            {{48, 57, 47}, {65, 65, 86}, {66, 90, 48}, {95, 95, 49}, {97, 97, 87}, {98, 122, 48}, },
            {{65, 90, 88}, {97, 122, 88}, },
            {{48, 122, -15}, },
            {{48, 122, -16}, },
            {{48, 122, -17}, },
            {{48, 122, -18}, },
            {{48, 122, -19}, },
            {{48, 122, -20}, },
            {{48, 122, -21}, },
            {{48, 122, -22}, },
            {{48, 122, -23}, },
            {{48, 122, -24}, },
            {{48, 122, -25}, },
            {{48, 122, -26}, },
            {{48, 122, -27}, },
            {{0, 65535, -7}, },
            {},
            {{34, 34, 89}, {39, 39, 90}, {92, 92, 91}, {98, 98, 92}, {102, 102, 93}, {110, 110, 94}, {114, 114, 95}, {116, 116, 96}, },
            {{48, 57, 97}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 57, 47}, {65, 70, 48}, {71, 71, 98}, {72, 90, 48}, {95, 95, 49}, {97, 102, 48}, {103, 103, 99}, {104, 122, 48}, },
            {{48, 122, -52}, },
            {{48, 77, -26}, {78, 78, 100}, {79, 109, -26}, {110, 110, 101}, {111, 122, 48}, },
            {{48, 68, -21}, {69, 69, 102}, {70, 100, -21}, {101, 101, 103}, {102, 122, 48}, },
            {{48, 122, -54}, },
            {{48, 122, -55}, },
            {{48, 78, -16}, {79, 79, 104}, {80, 95, -19}, {97, 110, 48}, {111, 111, 105}, {112, 122, 48}, },
            {{48, 122, -58}, },
            {{48, 72, -15}, {73, 73, 106}, {74, 104, -15}, {105, 105, 107}, {106, 122, 48}, },
            {{48, 122, -60}, },
            {{48, 78, -16}, {79, 79, 108}, {80, 110, -58}, {111, 111, 109}, {112, 122, 48}, },
            {{48, 81, -17}, {82, 82, 110}, {83, 113, -17}, {114, 114, 111}, {115, 122, 48}, },
            {{48, 122, -62}, },
            {{48, 122, -63}, },
            {{48, 122, -14}, },
            {{48, 57, 47}, {65, 82, 48}, {83, 83, 112}, {84, 84, 113}, {85, 90, 48}, {95, 95, 49}, {97, 114, 48}, {115, 115, 114}, {116, 116, 115}, {117, 122, 48}, },
            {{48, 122, -14}, },
            {{48, 122, -67}, },
            {{48, 57, 47}, {65, 88, 48}, {89, 89, 116}, {90, 90, 48}, {95, 95, 49}, {97, 120, 48}, {121, 121, 117}, {122, 122, 48}, },
            {{48, 122, -70}, },
            {{48, 57, 47}, {65, 83, 48}, {84, 84, 118}, {85, 95, -67}, {97, 115, 48}, {116, 116, 119}, {117, 122, 48}, },
            {{48, 75, -19}, {76, 76, 120}, {77, 90, 48}, {95, 107, -19}, {108, 108, 121}, {109, 122, 48}, },
            {{48, 122, -72}, },
            {{48, 122, -73}, },
            {{48, 72, -15}, {73, 73, 122}, {74, 104, -15}, {105, 105, 123}, {106, 122, 48}, },
            {{48, 122, -76}, },
            {{48, 69, -20}, {70, 70, 124}, {71, 90, 48}, {95, 101, -20}, {102, 102, 125}, {103, 122, 48}, },
            {{48, 122, -78}, },
            {{48, 57, 47}, {65, 65, 48}, {66, 66, 126}, {67, 90, 48}, {95, 95, 49}, {97, 97, 48}, {98, 98, 127}, {99, 122, 48}, },
            {{48, 57, 47}, {65, 76, 48}, {77, 77, 128}, {78, 90, 48}, {95, 95, 49}, {97, 108, 48}, {109, 109, 129}, {110, 122, 48}, },
            {{48, 57, 47}, {65, 84, 48}, {85, 85, 130}, {86, 95, -22}, {97, 116, 48}, {117, 117, 131}, {118, 122, 48}, },
            {{48, 122, -80}, },
            {{48, 122, -81}, },
            {{48, 122, -82}, },
            {{48, 72, -15}, {73, 73, 132}, {74, 104, -15}, {105, 105, 133}, {106, 122, 48}, },
            {{48, 122, -86}, },
            {{48, 75, -19}, {76, 76, 134}, {77, 81, 48}, {82, 82, 135}, {83, 95, -16}, {97, 107, 48}, {108, 108, 136}, {109, 113, 48}, {114, 114, 137}, {115, 122, 48}, },
            {{48, 122, -88}, },
            {{48, 57, 138}, {65, 90, 139}, {95, 95, 140}, {96, 96, 141}, {97, 122, 139}, },
            {{0, 65535, -7}, },
            {{0, 65535, -7}, },
            {{0, 65535, -7}, },
            {{0, 65535, -7}, },
            {{0, 65535, -7}, },
            {{0, 65535, -7}, },
            {{0, 65535, -7}, },
            {{0, 65535, -7}, },
            {{48, 57, 97}, },
            {{48, 72, -15}, {73, 73, 142}, {74, 104, -15}, {105, 105, 143}, {106, 122, 48}, },
            {{48, 122, -100}, },
            {{48, 82, -67}, {83, 83, 144}, {84, 90, 48}, {95, 114, -67}, {115, 115, 145}, {116, 122, 48}, },
            {{48, 122, -102}, },
            {{48, 57, 47}, {65, 65, 146}, {66, 95, -27}, {97, 97, 147}, {98, 122, 48}, },
            {{48, 122, -104}, },
            {{48, 57, 47}, {65, 79, 48}, {80, 80, 148}, {81, 90, 48}, {95, 95, 49}, {97, 111, 48}, {112, 112, 149}, {113, 122, 48}, },
            {{48, 122, -106}, },
            {{48, 82, -67}, {83, 83, 150}, {84, 114, -102}, {115, 115, 151}, {116, 122, 48}, },
            {{48, 122, -108}, },
            {{48, 57, 47}, {65, 65, 152}, {66, 95, -27}, {97, 97, 153}, {98, 122, 48}, },
            {{48, 122, -110}, },
            {{48, 68, -21}, {69, 69, 154}, {70, 100, -21}, {101, 101, 155}, {102, 122, 48}, },
            {{48, 122, -112}, },
            {{48, 68, -21}, {69, 69, 156}, {70, 100, -21}, {101, 101, 157}, {102, 122, 48}, },
            {{48, 68, -21}, {69, 69, 158}, {70, 78, 48}, {79, 79, 159}, {80, 95, -19}, {97, 100, 48}, {101, 101, 160}, {102, 110, 48}, {111, 111, 161}, {112, 122, 48}, },
            {{48, 122, -114}, },
            {{48, 122, -115}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 75, -19}, {76, 76, 162}, {77, 107, -73}, {108, 108, 163}, {109, 122, 48}, },
            {{48, 122, -122}, },
            {{48, 76, -81}, {77, 77, 164}, {78, 108, -81}, {109, 109, 165}, {110, 122, 48}, },
            {{48, 122, -124}, },
            {{48, 68, -21}, {69, 69, 166}, {70, 100, -21}, {101, 101, 167}, {102, 122, 48}, },
            {{48, 122, -126}, },
            {{48, 75, -19}, {76, 76, 168}, {77, 107, -73}, {108, 108, 169}, {109, 122, 48}, },
            {{48, 122, -128}, },
            {{48, 68, -21}, {69, 69, 170}, {70, 100, -21}, {101, 101, 171}, {102, 122, 48}, },
            {{48, 122, -130}, },
            {{48, 77, -26}, {78, 78, 172}, {79, 109, -26}, {110, 110, 173}, {111, 122, 48}, },
            {{48, 122, -132}, },
            {{48, 57, 47}, {65, 80, 48}, {81, 81, 174}, {82, 90, 48}, {95, 95, 49}, {97, 112, 48}, {113, 113, 175}, {114, 122, 48}, },
            {{48, 122, -134}, },
            {{48, 84, -82}, {85, 85, 176}, {86, 116, -82}, {117, 117, 177}, {118, 122, 48}, },
            {{48, 57, 47}, {65, 66, 48}, {67, 67, 178}, {68, 90, 48}, {95, 95, 49}, {97, 98, 48}, {99, 99, 179}, {100, 122, 48}, },
            {{48, 122, -136}, },
            {{48, 122, -137}, },
            {{48, 122, -90}, },
            {{48, 122, -90}, },
            {{48, 122, -90}, },
            {},
            {{48, 77, -26}, {78, 78, 180}, {79, 109, -26}, {110, 110, 181}, {111, 122, 48}, },
            {{48, 122, -144}, },
            {{48, 83, -72}, {84, 84, 182}, {85, 115, -72}, {116, 116, 183}, {117, 122, 48}, },
            {{48, 122, -146}, },
            {{48, 83, -72}, {84, 84, 184}, {85, 115, -72}, {116, 116, 185}, {117, 122, 48}, },
            {{48, 122, -148}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 83, -72}, {84, 84, 186}, {85, 115, -72}, {116, 116, 187}, {117, 122, 48}, },
            {{48, 122, -152}, },
            {{48, 83, -72}, {84, 84, 188}, {85, 115, -72}, {116, 116, 189}, {117, 122, 48}, },
            {{48, 122, -154}, },
            {{48, 72, -15}, {73, 73, 190}, {74, 104, -15}, {105, 105, 191}, {106, 122, 48}, },
            {{48, 122, -156}, },
            {{48, 81, -17}, {82, 82, 192}, {83, 113, -17}, {114, 114, 193}, {115, 122, 48}, },
            {{48, 122, -158}, },
            {{48, 70, -52}, {71, 71, 194}, {72, 102, -52}, {103, 103, 195}, {104, 122, 48}, },
            {{48, 122, -14}, },
            {{48, 122, -160}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 57, 47}, {65, 65, 196}, {66, 95, -27}, {97, 97, 197}, {98, 122, 48}, },
            {{48, 122, -166}, },
            {{48, 81, -17}, {82, 82, 198}, {83, 113, -17}, {114, 114, 199}, {115, 122, 48}, },
            {{48, 122, -168}, },
            {{48, 68, -21}, {69, 69, 200}, {70, 100, -21}, {101, 101, 201}, {102, 122, 48}, },
            {{48, 122, -170}, },
            {{48, 82, -67}, {83, 83, 202}, {84, 114, -102}, {115, 115, 203}, {116, 122, 48}, },
            {{48, 122, -172}, },
            {{48, 66, -137}, {67, 67, 204}, {68, 98, -137}, {99, 99, 205}, {100, 122, 48}, },
            {{48, 122, -174}, },
            {{48, 84, -82}, {85, 85, 206}, {86, 116, -82}, {117, 117, 207}, {118, 122, 48}, },
            {{48, 122, -176}, },
            {{48, 68, -21}, {69, 69, 208}, {70, 100, -21}, {101, 101, 209}, {102, 122, 48}, },
            {{48, 122, -178}, },
            {{48, 57, 47}, {65, 71, 48}, {72, 72, 210}, {73, 90, 48}, {95, 95, 49}, {97, 103, 48}, {104, 104, 211}, {105, 122, 48}, },
            {{48, 122, -180}, },
            {{48, 83, -72}, {84, 84, 212}, {85, 115, -72}, {116, 116, 213}, {117, 122, 48}, },
            {{48, 122, -182}, },
            {{48, 81, -17}, {82, 82, 214}, {83, 113, -17}, {114, 114, 215}, {115, 122, 48}, },
            {{48, 122, -184}, },
            {{48, 68, -21}, {69, 69, 216}, {70, 100, -21}, {101, 101, 217}, {102, 122, 48}, },
            {{48, 122, -186}, },
            {{48, 82, -67}, {83, 83, 218}, {84, 114, -102}, {115, 115, 219}, {116, 122, 48}, },
            {{48, 122, -188}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 70, -52}, {71, 71, 220}, {72, 102, -52}, {103, 103, 221}, {104, 122, 48}, },
            {{48, 122, -192}, },
            {{48, 83, -72}, {84, 84, 222}, {85, 115, -72}, {116, 116, 223}, {117, 122, 48}, },
            {{48, 122, -194}, },
            {{48, 68, -21}, {69, 69, 224}, {70, 100, -21}, {101, 101, 225}, {102, 122, 48}, },
            {{48, 122, -196}, },
            {{48, 81, -17}, {82, 82, 226}, {83, 113, -17}, {114, 114, 227}, {115, 122, 48}, },
            {{48, 122, -198}, },
            {{48, 68, -21}, {69, 69, 228}, {70, 100, -21}, {101, 101, 229}, {102, 122, 48}, },
            {{48, 122, -200}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 83, -72}, {84, 84, 230}, {85, 115, -72}, {116, 116, 231}, {117, 122, 48}, },
            {{48, 122, -204}, },
            {{48, 57, 47}, {65, 65, 232}, {66, 95, -27}, {97, 97, 233}, {98, 122, 48}, },
            {{48, 122, -206}, },
            {{48, 68, -21}, {69, 69, 234}, {70, 100, -21}, {101, 101, 235}, {102, 122, 48}, },
            {{48, 122, -208}, },
            {{48, 82, -67}, {83, 83, 236}, {84, 114, -102}, {115, 115, 237}, {116, 122, 48}, },
            {{48, 122, -210}, },
            {{48, 57, 47}, {65, 65, 238}, {66, 95, -27}, {97, 97, 239}, {98, 122, 48}, },
            {{48, 122, -212}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 57, 47}, {65, 65, 240}, {66, 95, -27}, {97, 97, 241}, {98, 122, 48}, },
            {{48, 122, -216}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 77, -26}, {78, 78, 242}, {79, 109, -26}, {110, 110, 243}, {111, 122, 48}, },
            {{48, 122, -222}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 81, -17}, {82, 82, 244}, {83, 113, -17}, {114, 114, 245}, {115, 122, 48}, },
            {{48, 122, -226}, },
            {{48, 88, -70}, {89, 89, 246}, {90, 120, -70}, {121, 121, 247}, {122, 122, 48}, },
            {{48, 122, -228}, },
            {{48, 77, -26}, {78, 78, 248}, {79, 109, -26}, {110, 110, 249}, {111, 122, 48}, },
            {{48, 122, -230}, },
            {{48, 57, 47}, {65, 65, 250}, {66, 95, -27}, {97, 97, 251}, {98, 122, 48}, },
            {{48, 122, -232}, },
            {{48, 83, -72}, {84, 84, 252}, {85, 115, -72}, {116, 116, 253}, {117, 122, 48}, },
            {{48, 122, -234}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 81, -17}, {82, 82, 254}, {83, 113, -17}, {114, 114, 255}, {115, 122, 48}, },
            {{48, 122, -240}, },
            {{48, 72, -15}, {73, 73, 256}, {74, 104, -15}, {105, 105, 257}, {106, 122, 48}, },
            {{48, 122, -242}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 66, -137}, {67, 67, 258}, {68, 98, -137}, {99, 99, 259}, {100, 122, 48}, },
            {{48, 122, -250}, },
            {{48, 76, -81}, {77, 77, 260}, {78, 108, -81}, {109, 109, 261}, {110, 122, 48}, },
            {{48, 122, -252}, },
            {{48, 68, -21}, {69, 69, 262}, {70, 100, -21}, {101, 101, 263}, {102, 122, 48}, },
            {{48, 122, -254}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 77, -26}, {78, 78, 264}, {79, 109, -26}, {110, 110, 265}, {111, 122, 48}, },
            {{48, 122, -258}, },
            {{48, 68, -21}, {69, 69, 266}, {70, 100, -21}, {101, 101, 267}, {102, 122, 48}, },
            {{48, 122, -260}, },
            {{48, 79, -106}, {80, 80, 268}, {81, 111, -106}, {112, 112, 269}, {113, 122, 48}, },
            {{48, 122, -262}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 83, -72}, {84, 84, 270}, {85, 115, -72}, {116, 116, 271}, {117, 122, 48}, },
            {{48, 122, -266}, },
            {{48, 82, -67}, {83, 83, 272}, {84, 114, -102}, {115, 115, 273}, {116, 122, 48}, },
            {{48, 122, -268}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 28, 28, 28, 28, -1, 0, 1, 2, 5, 3, -1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -1, 31, -1, 4, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 18, 18, 20, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -1, -1, -1, 30, 30, 30, 30, 30, 30, 30, 23, 23, 30, 30, 30, 30, 30, 30, 30, 30, 30, 26, 30, 26, 21, 21, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 8, 8, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 12, 12, 30, 30, 30, 30, 30, 30, 27, 27, 30, 30, 7, 7, 30, 30, 11, 11, 14, 14, 30, 30, 25, 25, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 19, 19, 27, 27, 30, 30, 30, 30, 16, 16, 6, 6, 17, 17, 30, 30, 30, 30, 30, 30, 10, 10, 30, 30, 30, 30, 30, 30, 24, 24, 30, 30, 30, 30, 9, 9, 15, 15, 22, 22, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
