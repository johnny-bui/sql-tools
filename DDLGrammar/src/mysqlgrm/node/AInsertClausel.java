/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.node;

import java.util.*;
import mysqlgrm.analysis.*;

@SuppressWarnings("nls")
public final class AInsertClausel extends PInsertClausel
{
    private TInsert _insert_;
    private TInto _into_;
    private TIdentifier _identifier_;
    private TLPar _lTupelPar_;
    private PCols _tupel_;
    private TRPar _rTupelPar_;
    private TValues _values_;
    private final LinkedList<PValueClausel> _valueClausel_ = new LinkedList<PValueClausel>();

    public AInsertClausel()
    {
        // Constructor
    }

    public AInsertClausel(
        @SuppressWarnings("hiding") TInsert _insert_,
        @SuppressWarnings("hiding") TInto _into_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLPar _lTupelPar_,
        @SuppressWarnings("hiding") PCols _tupel_,
        @SuppressWarnings("hiding") TRPar _rTupelPar_,
        @SuppressWarnings("hiding") TValues _values_,
        @SuppressWarnings("hiding") List<?> _valueClausel_)
    {
        // Constructor
        setInsert(_insert_);

        setInto(_into_);

        setIdentifier(_identifier_);

        setLTupelPar(_lTupelPar_);

        setTupel(_tupel_);

        setRTupelPar(_rTupelPar_);

        setValues(_values_);

        setValueClausel(_valueClausel_);

    }

    @Override
    public Object clone()
    {
        return new AInsertClausel(
            cloneNode(this._insert_),
            cloneNode(this._into_),
            cloneNode(this._identifier_),
            cloneNode(this._lTupelPar_),
            cloneNode(this._tupel_),
            cloneNode(this._rTupelPar_),
            cloneNode(this._values_),
            cloneList(this._valueClausel_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInsertClausel(this);
    }

    public TInsert getInsert()
    {
        return this._insert_;
    }

    public void setInsert(TInsert node)
    {
        if(this._insert_ != null)
        {
            this._insert_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._insert_ = node;
    }

    public TInto getInto()
    {
        return this._into_;
    }

    public void setInto(TInto node)
    {
        if(this._into_ != null)
        {
            this._into_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._into_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLPar getLTupelPar()
    {
        return this._lTupelPar_;
    }

    public void setLTupelPar(TLPar node)
    {
        if(this._lTupelPar_ != null)
        {
            this._lTupelPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lTupelPar_ = node;
    }

    public PCols getTupel()
    {
        return this._tupel_;
    }

    public void setTupel(PCols node)
    {
        if(this._tupel_ != null)
        {
            this._tupel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tupel_ = node;
    }

    public TRPar getRTupelPar()
    {
        return this._rTupelPar_;
    }

    public void setRTupelPar(TRPar node)
    {
        if(this._rTupelPar_ != null)
        {
            this._rTupelPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rTupelPar_ = node;
    }

    public TValues getValues()
    {
        return this._values_;
    }

    public void setValues(TValues node)
    {
        if(this._values_ != null)
        {
            this._values_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._values_ = node;
    }

    public LinkedList<PValueClausel> getValueClausel()
    {
        return this._valueClausel_;
    }

    public void setValueClausel(List<?> list)
    {
        for(PValueClausel e : this._valueClausel_)
        {
            e.parent(null);
        }
        this._valueClausel_.clear();

        for(Object obj_e : list)
        {
            PValueClausel e = (PValueClausel) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._valueClausel_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._insert_)
            + toString(this._into_)
            + toString(this._identifier_)
            + toString(this._lTupelPar_)
            + toString(this._tupel_)
            + toString(this._rTupelPar_)
            + toString(this._values_)
            + toString(this._valueClausel_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._insert_ == child)
        {
            this._insert_ = null;
            return;
        }

        if(this._into_ == child)
        {
            this._into_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lTupelPar_ == child)
        {
            this._lTupelPar_ = null;
            return;
        }

        if(this._tupel_ == child)
        {
            this._tupel_ = null;
            return;
        }

        if(this._rTupelPar_ == child)
        {
            this._rTupelPar_ = null;
            return;
        }

        if(this._values_ == child)
        {
            this._values_ = null;
            return;
        }

        if(this._valueClausel_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._insert_ == oldChild)
        {
            setInsert((TInsert) newChild);
            return;
        }

        if(this._into_ == oldChild)
        {
            setInto((TInto) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lTupelPar_ == oldChild)
        {
            setLTupelPar((TLPar) newChild);
            return;
        }

        if(this._tupel_ == oldChild)
        {
            setTupel((PCols) newChild);
            return;
        }

        if(this._rTupelPar_ == oldChild)
        {
            setRTupelPar((TRPar) newChild);
            return;
        }

        if(this._values_ == oldChild)
        {
            setValues((TValues) newChild);
            return;
        }

        for(ListIterator<PValueClausel> i = this._valueClausel_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PValueClausel) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
