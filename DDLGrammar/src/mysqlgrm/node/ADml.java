/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.node;

import mysqlgrm.analysis.*;

@SuppressWarnings("nls")
public final class ADml extends PDml
{
    private PInsertClausel _insertClausel_;
    private TSemicolon _semicolon_;

    public ADml()
    {
        // Constructor
    }

    public ADml(
        @SuppressWarnings("hiding") PInsertClausel _insertClausel_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setInsertClausel(_insertClausel_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ADml(
            cloneNode(this._insertClausel_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADml(this);
    }

    public PInsertClausel getInsertClausel()
    {
        return this._insertClausel_;
    }

    public void setInsertClausel(PInsertClausel node)
    {
        if(this._insertClausel_ != null)
        {
            this._insertClausel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._insertClausel_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._insertClausel_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._insertClausel_ == child)
        {
            this._insertClausel_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._insertClausel_ == oldChild)
        {
            setInsertClausel((PInsertClausel) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
