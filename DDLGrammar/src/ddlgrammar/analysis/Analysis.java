/* This file was generated by SableCC (http://www.sablecc.org/). */

package ddlgrammar.analysis;

import ddlgrammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADdl(ADdl node);
    void caseACreateTable(ACreateTable node);
    void caseATableDefinition(ATableDefinition node);
    void caseAColDef(AColDef node);
    void caseAIntType(AIntType node);
    void caseABigintType(ABigintType node);
    void caseAFloatType(AFloatType node);
    void caseATimestampType(ATimestampType node);
    void caseACharsType(ACharsType node);
    void caseAUniqueColConstraint(AUniqueColConstraint node);
    void caseANotNullColConstraint(ANotNullColConstraint node);
    void caseANotNull(ANotNull node);
    void caseAAdditionColDef(AAdditionColDef node);
    void caseATableConstraintList(ATableConstraintList node);
    void caseAPrimaryKeyTableConstraint(APrimaryKeyTableConstraint node);
    void caseAForeignKeyTableConstraint(AForeignKeyTableConstraint node);
    void caseATableConstraintTail(ATableConstraintTail node);
    void caseAPrimaryKey(APrimaryKey node);
    void caseAForeignKey(AForeignKey node);
    void caseACols(ACols node);
    void caseAMoreIdentifier(AMoreIdentifier node);
    void caseAReferencesClausel(AReferencesClausel node);

    void caseTNumber(TNumber node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTCreate(TCreate node);
    void caseTTable(TTable node);
    void caseTIf(TIf node);
    void caseTExists(TExists node);
    void caseTInteger(TInteger node);
    void caseTBigint(TBigint node);
    void caseTFloat(TFloat node);
    void caseTTimestamp(TTimestamp node);
    void caseTVarchar(TVarchar node);
    void caseTConstraint(TConstraint node);
    void caseTForeign(TForeign node);
    void caseTPrimary(TPrimary node);
    void caseTKey(TKey node);
    void caseTUnique(TUnique node);
    void caseTNot(TNot node);
    void caseTNull(TNull node);
    void caseTReferences(TReferences node);
    void caseTBlank(TBlank node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
