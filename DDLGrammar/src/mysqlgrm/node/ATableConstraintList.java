/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.node;

import java.util.*;
import mysqlgrm.analysis.*;

@SuppressWarnings("nls")
public final class ATableConstraintList extends PTableConstraintList
{
    private PTableConstraint _tableConstraint_;
    private final LinkedList<PTableConstraintTail> _tableConstraintTail_ = new LinkedList<PTableConstraintTail>();

    public ATableConstraintList()
    {
        // Constructor
    }

    public ATableConstraintList(
        @SuppressWarnings("hiding") PTableConstraint _tableConstraint_,
        @SuppressWarnings("hiding") List<?> _tableConstraintTail_)
    {
        // Constructor
        setTableConstraint(_tableConstraint_);

        setTableConstraintTail(_tableConstraintTail_);

    }

    @Override
    public Object clone()
    {
        return new ATableConstraintList(
            cloneNode(this._tableConstraint_),
            cloneList(this._tableConstraintTail_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATableConstraintList(this);
    }

    public PTableConstraint getTableConstraint()
    {
        return this._tableConstraint_;
    }

    public void setTableConstraint(PTableConstraint node)
    {
        if(this._tableConstraint_ != null)
        {
            this._tableConstraint_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tableConstraint_ = node;
    }

    public LinkedList<PTableConstraintTail> getTableConstraintTail()
    {
        return this._tableConstraintTail_;
    }

    public void setTableConstraintTail(List<?> list)
    {
        for(PTableConstraintTail e : this._tableConstraintTail_)
        {
            e.parent(null);
        }
        this._tableConstraintTail_.clear();

        for(Object obj_e : list)
        {
            PTableConstraintTail e = (PTableConstraintTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._tableConstraintTail_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tableConstraint_)
            + toString(this._tableConstraintTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tableConstraint_ == child)
        {
            this._tableConstraint_ = null;
            return;
        }

        if(this._tableConstraintTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tableConstraint_ == oldChild)
        {
            setTableConstraint((PTableConstraint) newChild);
            return;
        }

        for(ListIterator<PTableConstraintTail> i = this._tableConstraintTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTableConstraintTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
