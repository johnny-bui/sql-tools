/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.analysis;

import java.util.*;
import mysqlgrm.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPSql().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inASql(ASql node)
    {
        defaultIn(node);
    }

    public void outASql(ASql node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASql(ASql node)
    {
        inASql(node);
        {
            List<PSttm> copy = new ArrayList<PSttm>(node.getSttm());
            for(PSttm e : copy)
            {
                e.apply(this);
            }
        }
        outASql(node);
    }

    public void inADdlSttm(ADdlSttm node)
    {
        defaultIn(node);
    }

    public void outADdlSttm(ADdlSttm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADdlSttm(ADdlSttm node)
    {
        inADdlSttm(node);
        if(node.getDdl() != null)
        {
            node.getDdl().apply(this);
        }
        outADdlSttm(node);
    }

    public void inADmlSttm(ADmlSttm node)
    {
        defaultIn(node);
    }

    public void outADmlSttm(ADmlSttm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADmlSttm(ADmlSttm node)
    {
        inADmlSttm(node);
        if(node.getDml() != null)
        {
            node.getDml().apply(this);
        }
        outADmlSttm(node);
    }

    public void inACreateDdl(ACreateDdl node)
    {
        defaultIn(node);
    }

    public void outACreateDdl(ACreateDdl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACreateDdl(ACreateDdl node)
    {
        inACreateDdl(node);
        if(node.getCreateClausel() != null)
        {
            node.getCreateClausel().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outACreateDdl(node);
    }

    public void inATruncateDdl(ATruncateDdl node)
    {
        defaultIn(node);
    }

    public void outATruncateDdl(ATruncateDdl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATruncateDdl(ATruncateDdl node)
    {
        inATruncateDdl(node);
        if(node.getTruncateClausel() != null)
        {
            node.getTruncateClausel().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATruncateDdl(node);
    }

    public void inADropDdl(ADropDdl node)
    {
        defaultIn(node);
    }

    public void outADropDdl(ADropDdl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADropDdl(ADropDdl node)
    {
        inADropDdl(node);
        if(node.getDropClausel() != null)
        {
            node.getDropClausel().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADropDdl(node);
    }

    public void inACreateClausel(ACreateClausel node)
    {
        defaultIn(node);
    }

    public void outACreateClausel(ACreateClausel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACreateClausel(ACreateClausel node)
    {
        inACreateClausel(node);
        if(node.getCreate() != null)
        {
            node.getCreate().apply(this);
        }
        if(node.getTable() != null)
        {
            node.getTable().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTableDefinition() != null)
        {
            node.getTableDefinition().apply(this);
        }
        outACreateClausel(node);
    }

    public void inATableDefinition(ATableDefinition node)
    {
        defaultIn(node);
    }

    public void outATableDefinition(ATableDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableDefinition(ATableDefinition node)
    {
        inATableDefinition(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        {
            List<PAdditionColDef> copy = new ArrayList<PAdditionColDef>(node.getAdditionColDef());
            for(PAdditionColDef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTableConstraintTail> copy = new ArrayList<PTableConstraintTail>(node.getTableConstraintTail());
            for(PTableConstraintTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATableDefinition(node);
    }

    public void inAColDef(AColDef node)
    {
        defaultIn(node);
    }

    public void outAColDef(AColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColDef(AColDef node)
    {
        inAColDef(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            List<PColConstraint> copy = new ArrayList<PColConstraint>(node.getColConstraint());
            for(PColConstraint e : copy)
            {
                e.apply(this);
            }
        }
        outAColDef(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntType(node);
    }

    public void inABigintType(ABigintType node)
    {
        defaultIn(node);
    }

    public void outABigintType(ABigintType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABigintType(ABigintType node)
    {
        inABigintType(node);
        if(node.getBigint() != null)
        {
            node.getBigint().apply(this);
        }
        outABigintType(node);
    }

    public void inAFloatType(AFloatType node)
    {
        defaultIn(node);
    }

    public void outAFloatType(AFloatType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatType(AFloatType node)
    {
        inAFloatType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatType(node);
    }

    public void inATimestampType(ATimestampType node)
    {
        defaultIn(node);
    }

    public void outATimestampType(ATimestampType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimestampType(ATimestampType node)
    {
        inATimestampType(node);
        if(node.getTimestamp() != null)
        {
            node.getTimestamp().apply(this);
        }
        outATimestampType(node);
    }

    public void inACharsType(ACharsType node)
    {
        defaultIn(node);
    }

    public void outACharsType(ACharsType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharsType(ACharsType node)
    {
        inACharsType(node);
        if(node.getVarchar() != null)
        {
            node.getVarchar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        {
            List<TIntegerNumber> copy = new ArrayList<TIntegerNumber>(node.getIntegerNumber());
            for(TIntegerNumber e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACharsType(node);
    }

    public void inAUniqueColConstraint(AUniqueColConstraint node)
    {
        defaultIn(node);
    }

    public void outAUniqueColConstraint(AUniqueColConstraint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniqueColConstraint(AUniqueColConstraint node)
    {
        inAUniqueColConstraint(node);
        if(node.getUnique() != null)
        {
            node.getUnique().apply(this);
        }
        outAUniqueColConstraint(node);
    }

    public void inANotNullColConstraint(ANotNullColConstraint node)
    {
        defaultIn(node);
    }

    public void outANotNullColConstraint(ANotNullColConstraint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotNullColConstraint(ANotNullColConstraint node)
    {
        inANotNullColConstraint(node);
        if(node.getNotNull() != null)
        {
            node.getNotNull().apply(this);
        }
        outANotNullColConstraint(node);
    }

    public void inANotNull(ANotNull node)
    {
        defaultIn(node);
    }

    public void outANotNull(ANotNull node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotNull(ANotNull node)
    {
        inANotNull(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANotNull(node);
    }

    public void inAAdditionColDef(AAdditionColDef node)
    {
        defaultIn(node);
    }

    public void outAAdditionColDef(AAdditionColDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionColDef(AAdditionColDef node)
    {
        inAAdditionColDef(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getColDef() != null)
        {
            node.getColDef().apply(this);
        }
        outAAdditionColDef(node);
    }

    public void inATableConstraintList(ATableConstraintList node)
    {
        defaultIn(node);
    }

    public void outATableConstraintList(ATableConstraintList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableConstraintList(ATableConstraintList node)
    {
        inATableConstraintList(node);
        if(node.getTableConstraint() != null)
        {
            node.getTableConstraint().apply(this);
        }
        {
            List<PTableConstraintTail> copy = new ArrayList<PTableConstraintTail>(node.getTableConstraintTail());
            for(PTableConstraintTail e : copy)
            {
                e.apply(this);
            }
        }
        outATableConstraintList(node);
    }

    public void inAPrimaryKeyTableConstraint(APrimaryKeyTableConstraint node)
    {
        defaultIn(node);
    }

    public void outAPrimaryKeyTableConstraint(APrimaryKeyTableConstraint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryKeyTableConstraint(APrimaryKeyTableConstraint node)
    {
        inAPrimaryKeyTableConstraint(node);
        if(node.getPrimaryKey() != null)
        {
            node.getPrimaryKey().apply(this);
        }
        outAPrimaryKeyTableConstraint(node);
    }

    public void inAForeignKeyTableConstraint(AForeignKeyTableConstraint node)
    {
        defaultIn(node);
    }

    public void outAForeignKeyTableConstraint(AForeignKeyTableConstraint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForeignKeyTableConstraint(AForeignKeyTableConstraint node)
    {
        inAForeignKeyTableConstraint(node);
        if(node.getForeignKey() != null)
        {
            node.getForeignKey().apply(this);
        }
        outAForeignKeyTableConstraint(node);
    }

    public void inATableConstraintTail(ATableConstraintTail node)
    {
        defaultIn(node);
    }

    public void outATableConstraintTail(ATableConstraintTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableConstraintTail(ATableConstraintTail node)
    {
        inATableConstraintTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTableConstraint() != null)
        {
            node.getTableConstraint().apply(this);
        }
        outATableConstraintTail(node);
    }

    public void inAPrimaryKey(APrimaryKey node)
    {
        defaultIn(node);
    }

    public void outAPrimaryKey(APrimaryKey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryKey(APrimaryKey node)
    {
        inAPrimaryKey(node);
        if(node.getConstraint() != null)
        {
            node.getConstraint().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getKey() != null)
        {
            node.getKey().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCol() != null)
        {
            node.getCol().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPrimaryKey(node);
    }

    public void inAForeignKey(AForeignKey node)
    {
        defaultIn(node);
    }

    public void outAForeignKey(AForeignKey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForeignKey(AForeignKey node)
    {
        inAForeignKey(node);
        if(node.getConstraint() != null)
        {
            node.getConstraint().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getForeign() != null)
        {
            node.getForeign().apply(this);
        }
        if(node.getKey() != null)
        {
            node.getKey().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCols() != null)
        {
            node.getCols().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReferencesClausel() != null)
        {
            node.getReferencesClausel().apply(this);
        }
        outAForeignKey(node);
    }

    public void inACols(ACols node)
    {
        defaultIn(node);
    }

    public void outACols(ACols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACols(ACols node)
    {
        inACols(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PMoreIdentifier> copy = new ArrayList<PMoreIdentifier>(node.getMoreIdentifier());
            for(PMoreIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outACols(node);
    }

    public void inAMoreIdentifier(AMoreIdentifier node)
    {
        defaultIn(node);
    }

    public void outAMoreIdentifier(AMoreIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreIdentifier(AMoreIdentifier node)
    {
        inAMoreIdentifier(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMoreIdentifier(node);
    }

    public void inAReferencesClausel(AReferencesClausel node)
    {
        defaultIn(node);
    }

    public void outAReferencesClausel(AReferencesClausel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReferencesClausel(AReferencesClausel node)
    {
        inAReferencesClausel(node);
        if(node.getReferences() != null)
        {
            node.getReferences().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCols() != null)
        {
            node.getCols().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAReferencesClausel(node);
    }

    public void inADropClausel(ADropClausel node)
    {
        defaultIn(node);
    }

    public void outADropClausel(ADropClausel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADropClausel(ADropClausel node)
    {
        inADropClausel(node);
        if(node.getDrop() != null)
        {
            node.getDrop().apply(this);
        }
        if(node.getTable() != null)
        {
            node.getTable().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADropClausel(node);
    }

    public void inATruncateClausel(ATruncateClausel node)
    {
        defaultIn(node);
    }

    public void outATruncateClausel(ATruncateClausel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATruncateClausel(ATruncateClausel node)
    {
        inATruncateClausel(node);
        if(node.getTruncate() != null)
        {
            node.getTruncate().apply(this);
        }
        if(node.getTable() != null)
        {
            node.getTable().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATruncateClausel(node);
    }

    public void inADml(ADml node)
    {
        defaultIn(node);
    }

    public void outADml(ADml node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADml(ADml node)
    {
        inADml(node);
        if(node.getInsertClausel() != null)
        {
            node.getInsertClausel().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADml(node);
    }

    public void inAInsertClausel(AInsertClausel node)
    {
        defaultIn(node);
    }

    public void outAInsertClausel(AInsertClausel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInsertClausel(AInsertClausel node)
    {
        inAInsertClausel(node);
        if(node.getInsert() != null)
        {
            node.getInsert().apply(this);
        }
        if(node.getInto() != null)
        {
            node.getInto().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLTupelPar() != null)
        {
            node.getLTupelPar().apply(this);
        }
        if(node.getTupel() != null)
        {
            node.getTupel().apply(this);
        }
        if(node.getRTupelPar() != null)
        {
            node.getRTupelPar().apply(this);
        }
        if(node.getValues() != null)
        {
            node.getValues().apply(this);
        }
        {
            List<PValueClausel> copy = new ArrayList<PValueClausel>(node.getValueClausel());
            for(PValueClausel e : copy)
            {
                e.apply(this);
            }
        }
        outAInsertClausel(node);
    }

    public void inAValueClausel(AValueClausel node)
    {
        defaultIn(node);
    }

    public void outAValueClausel(AValueClausel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueClausel(AValueClausel node)
    {
        inAValueClausel(node);
        if(node.getLValuePar() != null)
        {
            node.getLValuePar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getRValuePar() != null)
        {
            node.getRValuePar().apply(this);
        }
        outAValueClausel(node);
    }

    public void inAValues(AValues node)
    {
        defaultIn(node);
    }

    public void outAValues(AValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValues(AValues node)
    {
        inAValues(node);
        if(node.getSingleValue() != null)
        {
            node.getSingleValue().apply(this);
        }
        {
            List<PMoreSingleValue> copy = new ArrayList<PMoreSingleValue>(node.getMoreSingleValue());
            for(PMoreSingleValue e : copy)
            {
                e.apply(this);
            }
        }
        outAValues(node);
    }

    public void inAVarSingleValue(AVarSingleValue node)
    {
        defaultIn(node);
    }

    public void outAVarSingleValue(AVarSingleValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSingleValue(AVarSingleValue node)
    {
        inAVarSingleValue(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarSingleValue(node);
    }

    public void inAIntSingleValue(AIntSingleValue node)
    {
        defaultIn(node);
    }

    public void outAIntSingleValue(AIntSingleValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntSingleValue(AIntSingleValue node)
    {
        inAIntSingleValue(node);
        if(node.getIntegerNumber() != null)
        {
            node.getIntegerNumber().apply(this);
        }
        outAIntSingleValue(node);
    }

    public void inAFloatSingleValue(AFloatSingleValue node)
    {
        defaultIn(node);
    }

    public void outAFloatSingleValue(AFloatSingleValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatSingleValue(AFloatSingleValue node)
    {
        inAFloatSingleValue(node);
        if(node.getFloatingPointNumber() != null)
        {
            node.getFloatingPointNumber().apply(this);
        }
        outAFloatSingleValue(node);
    }

    public void inAStringSingleValue(AStringSingleValue node)
    {
        defaultIn(node);
    }

    public void outAStringSingleValue(AStringSingleValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringSingleValue(AStringSingleValue node)
    {
        inAStringSingleValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringSingleValue(node);
    }

    public void inAMoreSingleValue(AMoreSingleValue node)
    {
        defaultIn(node);
    }

    public void outAMoreSingleValue(AMoreSingleValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreSingleValue(AMoreSingleValue node)
    {
        inAMoreSingleValue(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSingleValue() != null)
        {
            node.getSingleValue().apply(this);
        }
        outAMoreSingleValue(node);
    }
}
