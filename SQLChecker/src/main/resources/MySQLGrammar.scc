/* 
	filename   : DDLGrammar.ssc
	created on : Feb 4, 2013
	description:
*/

/* define package-prefix */
Package mysqlgrm;

Helpers
	letter = [['a' .. 'z']+['A'..'Z']];
	digit = ['0'..'9'];
	letter_or_digit = letter | digit | '_';
	a = 'a'|'A';
	b = 'b'|'B';
	c = 'c'|'C';
	d = 'd'|'D';
	e = 'e'|'E';
	f = 'f'|'F';
	g = 'g'|'G';
	h = 'h'|'H';
	i = 'i'|'I';
	j = 'j'|'J';
	k = 'k'|'K';
	l = 'l'|'L';
	m = 'm'|'M';
	n = 'n'|'N';
	o = 'o'|'O';
	p = 'p'|'P';
	q = 'q'|'Q';
	r = 'r'|'R';
	s = 's'|'S';
	t = 't'|'T';
	u = 'u'|'U';
	v = 'v'|'V';
	w = 'w'|'W';
	x = 'x'|'X';
	y = 'y'|'Y';
	z = 'z'|'Z';
	dot = '.';
	backquote = '`';
	row = r o w ;

	cr  = 0x000d;
	lf  = 0x000a;

	number = ['0' .. '9']+;
	at = '@';

	engine = e n g i n e;
	type = t y p e ;

	escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\' ;
	unicode_input_character = [0..0xffff];
	input_character = [unicode_input_character - [cr + lf]];
	string_character = [input_character - ['"' + '\']] | escape_sequence;
	line_terminator = lf | cr | cr lf;
	string_literal = '"' string_character* '"';	


/* define token */
Tokens
	l_par = '(';
	r_par = ')';
	comma = ',';
	semicolon = ';';
	equal = '=';
	dot = '.';
	plus = '+';
	minus = '-';
	star = '*';
	slash = '/';

	floating_point_number = digit+ dot digit*;
	integer_number = number;

	// Keywords
		// data type
	integer = i n t e g e r;
	bigint = b  i g i n t;
	float = f l o a t;
	timestamp = t i m e s t a m p ;
	varchar = v a r c h a r;
	text = t e x t;
		// KW in create table statement
	create = c r e a t e;
	table = t a b l e;
	if = i f;
	exists = e x i s t s;
	
	constraint = c o n s t r a i n t;
	foreign = f o r e i g n ;
	primary = p r i m a r y;
	key = k e y;
	unique = u n i q u e;
	not = n o t;
	null = n u l l;	
	references = r e f e r e n c e s;	
	default = d e f a u l t;
	character = c h a r a c t e r;
	set = s e t;
	auto_increment = a u t o '_' i n c r e m e n t;
		// KW in drop table statement
	drop = d r o p;
		// KW in truncate table statement
	truncate = t r u n c a t e;
		// KW in insert into
	insert = i n s e r t;
	into = i n t o;
	values = v a l u e | v a l u e s ;
	delete = d e l e t e;
	from = f r o m;
	select = s e l e c t;
	distinct = d i s t  i n c t row?;
	as = a s;
	all = a l l;
	where = w h e r e;

	auto = a u t o ;
	increment = i n c r e m e n t;
	my_isam = 'MyISAM';
	inno_db = 'InnoDB';	
	table_type= engine | type;
	blank = (' ' | 13 | 10 | 9)+;
	var = at letter letter_or_digit+;

	identifier = (backquote letter letter_or_digit* backquote) | (letter letter_or_digit*);
	oneline_comment = '--' input_character* line_terminator?;
	string_literal = '"' string_character* '"';

/* Token to be ignored */
Ignored Tokens
	blank, oneline_comment;


Productions
	sql = sttm+;
	sttm 
		={ddl} ddl
		|{dml} dml;

////////////////////////////////////////////////////////////////////////////////////
/* ========================================================================= */
	ddl = {create} create_clausel semicolon
		| {truncate} truncate_clausel semicolon
		| {drop} drop_clausel semicolon;

/////////////////////////////////////////////////////////////////////////////////////	
	create_clausel = create table if_not_exists? identifier table_definition table_option*;

	if_not_exists = if not exists;

	table_definition =
		l_par col_def addition_col_def* table_constraint_tail* r_par;
	
	col_def = identifier data_type col_constraint*;

	data_type = 
		 {int} integer 
		|{bigint} bigint 
		|{float} float 
		|{timestamp} timestamp 
		|{text} text
		|{chars} varchar l_par integer_number+ r_par;
	
	col_constraint = 
		 {unique} unique
		|{not_null} not null
		|{auto_increment} auto_increment;


	addition_col_def = comma col_def;

	table_constraint_list 
		= table_constraint table_constraint_tail*;

	table_constraint = 
		 {primary_key} primary_key
		|{foreign_key} foreign_key;
	
	table_constraint_tail = 
		comma table_constraint;

	primary_key = constraint [name]:identifier primary key l_par [col]:identifier_list r_par;
	foreign_key = constraint [name]:identifier foreign key l_par identifier_list r_par references_clausel;
	
	identifier_list = identifier more_identifier*;
	more_identifier = comma identifier;
	
	references_clausel = 
		references identifier l_par identifier_list r_par;
	
	table_option =
		{type} table_type equal? engine_name
		|{char_set} default_character_set equal? identifier
		|{auto_increment} auto_increment equal? integer_number;
			
	engine_name = {my_isam} T.my_isam | {inno_db} T.inno_db;
	default_character_set = default character set;


////////////////////////////////////////////////////////////////////////////////
	drop_clausel = drop table? if exists identifier_list ;

////////////////////////////////////////////////////////////////////////////////
	truncate_clausel = truncate table identifier;	

/* Data manipulation language */
	dml = 
		{insert} insert_clausel semicolon
		|{delete} delete_clausel semicolon
		|{select} select_clausel semicolon;

	insert_clausel = insert into identifier 
			[l_tupel_par]:l_par [tupel]:identifier_list [r_tupel_par]:r_par 
			T.values value_clausel_list;

	value_clausel_list = value_clausel more_value_clausel*;
	value_clausel =  [l_value_par]:l_par [value]:P.values [r_value_par]:r_par;
	more_value_clausel = comma value_clausel;

	values = single_value more_single_value*;
	single_value = 
		{var} var
		|{int} integer_number
		|{float} floating_point_number
		|{string} string_literal;
	
	more_single_value = comma single_value;		

	delete_clausel = delete from identifier_list;
	
	select_clausel = select select_option* select_exprs select_tail?;

	select_option = 
		{all} all
		|{distinct} distinct
		;
		
	select_exprs = 
		{exprs} expr_list
		|{star} star;
	
	expr_list = expr more_expr*;
	expr = simple_expr alias?;
	more_expr = comma expr;
	alias = as identifier;

	simple_expr = 
		{term}term
		|{add} simple_expr plus term
		|{sub} simple_expr minus term;

	term =
		{atom} atom
		|{mul} term star atom
		|{div} term slash atom;

	atom =
		{cols} identifier
		|{val} single_value
		|{ref} [tab]:identifier dot [col]:identifier
		|{f_call} identifier l_par arg_list r_par;	
	
	arg_list = arg more_arg*;
	arg = 
		{expr}simple_expr 
		|{star} star;
	more_arg = comma arg;
	
	select_tail =
		from_clausel
		where_clausel ?
/*		group_by_clausel ?
		having_clausel?
		order_by_clausel?
		into_clausel
		limit_clausel?*/;
	
	from_clausel = 
		{table_ref} from table_ref_list;

	table_ref_list = table_ref more_table_ref*;
	table_ref = 
		{id}identifier alias?
		|{subquery} l_par select_clausel r_par alias;
	more_table_ref = comma table_ref;	
	
	where_clausel = where;	