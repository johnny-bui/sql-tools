/* 
	filename   : bnf.ssc
	created on : Feb 25, 2013
	description:
*/

/* define package-prefix */
Package com.github.verylazyboy.bnf;

Helpers 
	all = [0 .. 0xffff];
	letter = [['a' .. 'z']+['A'..'Z']];
	cap_letter = ['A' .. 'Z'] ;

	digit = ['0'..'9'];
	letter_or_digit = letter | digit | '_';
	cap_letter_or_digit = cap_letter | digit |'_' |'-';

	ht  = 0x0009;
	ff  = 0x000c;
	
	sp = ' ';
	tab = 9;
	cr = 13;
	lf = 10;
	eol = lf | cr | cr lf;
	
	bar = '|';
	lt = '<';
	gt = '>';
	question_mark = '?';
	plus = '+';
	star = '*';
	l_brace = '{';
	r_brace = '}';
	l_parent = '(';
	r_parent = ')';
	l_bracket ='[';
	r_bracket =']';
	double_quote = '"';
	percent = '%';
	ampersand = '&';
	single_quote = 39;
	comma = ',';
	dot = '.';
	minus = '-';
	slash = '/';
	colon = ':';	
	semicolon = ';';
	equal = '=';
	circumflex = '^';
	underscore = '_';

	metachar = 
		bar 
		|l_brace
		|r_brace
		|l_bracket
		|r_bracket
		|semicolon
		|lt
		|gt
	;
	
	non_letter_character = 
		|question_mark 
		|plus 
		|star
		|percent
		|ampersand
		|single_quote
		|l_parent
		|r_parent
		|comma
		|dot
		|minus
		|slash
		|colon
		|semicolon
		|equal
		|circumflex
		|underscore
		|'\"'
;		
	
	input_character = [all - [cr + lf]];
	//blank = (' ' | tab )+;
	blank = (' ' | tab | eol)+;
	minus_minus = '--';

	not_star = [all - '*'];
    not_star_slash = [not_star - '/'];

	short_comment = '//' input_character* eol;	
// OK understand!!!!!!!!! if we see a minus or morem we must look forward 
// to if if the next string is "-/p" or "-XXXXXX"	
	long_comment = 
'/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
	
	string_char = letter_or_digit | non_letter_character;
/*
States
	normal, input_char;
*/
/*
Normal : use character like operator
InputChar : use character as a character in token
*/
	
Tokens
	see_the_rule = '!!'  input_character* dot;

	identifier = 
'<' letter_or_digit+ ( (sp|minus|colon)+ letter_or_digit+)* '>';

	token_name = cap_letter cap_letter_or_digit*;

	blank = blank|eol;

	assign = '::=';
	product_sep = ';';

	l_brace = '{';
	r_brace = '}';

	dot_dot_dot = '...';

	bar = '|';

	l_bracket = '[';	
	r_bracket = ']';

	eol = eol;
	production = 'Productions';
	token = 'Tokens';

	string = (string_char+ )
	|(double_quote (metachar|string_char)+ double_quote);

	integer_number = digit+;	

	oneline_comment = short_comment ;
	multiline_comment = long_comment;
	

Ignored Tokens
	blank, oneline_comment, multiline_comment
;


Productions
	grammar = 
		tokens? productions
	;
	tokens = T.token token_def*;

	token_def = 	
		identifier assign alts product_sep
		{->New token_def(identifier,[alts.alt])}
	;

	////////////////////////////////////////////////////////////////////////////////
	productions 
	= T.production [p]:prod+
		{-> New productions([p])}
	;
	prod = 	
		identifier assign alts product_sep
		{->New prod(identifier,[alts.alt])}
	;

	alts 
		{->[alt]:alt*}
	= alt [tail]:alts_tail*
		{->[alt,tail.alt]}
	;

	alt = 
		elem *
	;
	alts_tail 
		{->alt}
	= bar alt
		{->alt}
	;

	elem 
	= {simple} simple_elem 
		{->simple_elem.elem}
	| {repetition} simple_elem dot_dot_dot
		{->New elem.repetition(simple_elem.elem)}
	;

	simple_elem 
		{->elem}
	={elementar} elementar_element
		{->elementar_element.elem}
	|{optional} [op]:optional_element
		{-> op.elem}
	|{mandatory} [man]:mandatory_element
		{-> man.elem}
	;

	elementar_element
		{->elem} 
	= {id} identifier
		{->New elem.elementar(New elementar_elem.id(identifier))}
	|{str} string
		{->New elem.elementar(New elementar_elem.str(string))}
	|{token} token_name
		{->New elem.elementar(New elementar_elem.token(token_name))}
	|{s_t_r} see_the_rule
		{->New elem.elementar(New elementar_elem.s_t_r(see_the_rule))}
	;		

	optional_element
		{->elem} 
	= l_bracket [expr]:element_expression r_bracket
		{->New elem.optional(New elem.chain([expr.elems]))}
	;

	mandatory_element
		{->elem}
	= l_brace [expr]:element_expression r_brace
		{->New elem.mandatory(New elem.chain([expr.elems]))}
	;

	element_expression
		{->[elems]:elem*}
	= {one} element_term
		{->[element_term.elems]} 
	| {more} [expr]:element_expression bar [term]:element_term
		{->[New elem.term([expr.elems, term.elems])]}
	;
	
	element_term 
		{->[elems]:elem*}
	= {single} elem
		{->[elem]}
	| {chain} [term]:element_term elem
		{->[New elem.chain([term.elems, elem])]}
	;
	
Abstract Syntax Tree

	grammar = 
		tokens? productions
	;
	tokens = T.token token_def*;

	token_def = 	
		identifier /*assign*/ alt+ /*product_sep*/
	;

	////////////////////////////////////////////////////////////////////////////////
	productions = prod+;
	prod = 	
		identifier /*assign*/ alt+ /*product_sep*/
	;

	alt = elem*;	

	elem 
	= {repetition} elem 
	|{elementar} elementar_elem
	|{optional} elem // a elem in a bracket
	|{term} elem* // one or more elements concated by a bar |
	|{chain} elem* // one or more elements in a sequence
	;

	elementar_elem
	= {id} identifier
	|{str} string
	|{token} token_name
	|{s_t_r} see_the_rule
	;