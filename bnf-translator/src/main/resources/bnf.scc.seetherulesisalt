/* 
	filename   : bnf.ssc
	created on : Feb 25, 2013
	description:
*/

/* define package-prefix */
Package com.github.verylazyboy.bnf;

Helpers 
	all = [0 .. 0xffff];
	letter = [['a' .. 'z']+['A'..'Z']];
	cap_letter = ['A' .. 'Z'] ;

	digit = ['0'..'9'];
	letter_or_digit = letter | digit | '_';
	cap_letter_or_digit = cap_letter | digit |'_' |'-';

	ht  = 0x0009;
	ff  = 0x000c;
	
	sp = ' ';
	tab = 9;
	cr = 13;
	lf = 10;
	eol = lf | cr | cr lf;
	
	bar = '|';
	lt = '<';
	gt = '>';
	question_mark = '?';
	plus = '+';
	star = '*';
	l_brace = '{';
	r_brace = '}';
	l_parent = '(';
	r_parent = ')';
	l_bracket ='[';
	r_bracket =']';
	double_quote = '"';
	percent = '%';
	ampersand = '&';
	single_quote = 39;
	comma = ',';
	dot = '.';
	minus = '-';
	slash = '/';
	colon = ':';	
	semicolon = ';';
	equal = '=';
	circumflex = '^';
	underscore = '_';

	metachar = 
		bar 
		|l_brace
		|r_brace
		| l_bracket
		|r_bracket
		|semicolon
	;
	
	non_letter_character = 
		lt 
		|gt 
		|question_mark 
		|plus 
		|star
		|percent
		|ampersand
		|single_quote
		|l_parent
		|r_parent
		|comma
		|dot
		|minus
		|slash
		|colon
		|semicolon
		|equal
		|circumflex
		|underscore
		|'\"'
;		
	
	input_character = [all - [cr + lf]];
	//blank = (' ' | tab )+;
	blank = (' ' | tab | eol)+;
	minus_minus = '--';

	not_star = [all - '*'];
    not_star_slash = [not_star - '/'];

	short_comment = '//' input_character* eol;	
// OK understand!!!!!!!!! if we see a minus or morem we must look forward 
// to if if the next string is "-/p" or "-XXXXXX"	
	long_comment = 
'/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
	
	string_char = letter_or_digit | non_letter_character;
/*
States
	normal, input_char;
*/
/*
Normal : use character like operator
InputChar : use character as a character in token
*/
	
Tokens
	see_the_rule = '!!'  input_character* dot;

//{normal,input_char->normal}	
	identifier = 
'<' letter_or_digit+ ( (sp|minus|colon)+ letter_or_digit+)* '>';

	token_name = cap_letter cap_letter_or_digit*;

	blank = blank|eol;

//{normal->input_char, input_char->normal}
	assign = '::=';
	product_sep = ';';

	l_brace = '{';
	r_brace = '}';

	dot_dot_dot = '...';

//{normal->input_char}
	bar = '|';

//{normal}
	l_bracket = '[';	

//{normal}
	r_bracket = ']';
	eol = eol;
//{input_char->normal}
	string = (string_char+ )
	|(double_quote (metachar|string_char)+ double_quote);

//{normal,input_char->normal}
	integer_number = digit+;	

	oneline_comment = short_comment ;
	multiline_comment = long_comment;
	

Ignored Tokens
	blank, oneline_comment, multiline_comment
;


Productions
	productions = prod+;
	prod = 	
		identifier assign alts product_sep
		{->New prod(identifier, [alts.list_alt])}
	;

	alts 
		{-> [list_alt]:alt*}
	= alt [tail]:alts_tail*
		{->[alt, tail.alt]}
	| {s_t_r} see_the_rule
		{-> []}
	;

	alt = 
		elem* 
	;
	alts_tail {->alt} = bar alt{->alt};

	elem =
		{term} term {->term.elem}
		|{option} l_bracket options r_bracket
			{->New elem.option([options.list_opt])}
	;

	options {->[list_opt]:option*} = 
		 option [tail]:options_tail*
		{->[option, tail.option]}
	;

	option = 
		elem+ 
	;
	options_tail{->option} 
	= bar option {->option};


	term {->elem} =
		{factor} factor 
			{-> factor.elem}
		|{factor_list} factor dot_dot_dot
			{-> New elem.list(factor.elem)}
	;


	factor {->[elem]:elem} =
		{id} [id]:identifier {-> New elem.id(id)}
		| {str} [str]:string {-> New elem.str(str)}
		| {token} token_name{->New elem.token(token_name)}
		| {block} l_brace options r_brace
			{-> New elem.option([options.list_opt])}
	;


Abstract Syntax Tree
	productions = prod+;
	prod = 	
		identifier alt*
	;
	
	alt =  elem* | {s_t_r} ;

	elem =
		{id} identifier
		|{str} string
		|{token} token_name
		|{list} elem
		|{option} option*
	;
	
	option = elem+;

