/* This file was generated by SableCC (http://www.sablecc.org/). */

package mysqlgrm.node;

import mysqlgrm.analysis.*;

@SuppressWarnings("nls")
public final class ATruncateClausel extends PTruncateClausel
{
    private TTruncate _truncate_;
    private TTable _table_;
    private TIdentifier _identifier_;

    public ATruncateClausel()
    {
        // Constructor
    }

    public ATruncateClausel(
        @SuppressWarnings("hiding") TTruncate _truncate_,
        @SuppressWarnings("hiding") TTable _table_,
        @SuppressWarnings("hiding") TIdentifier _identifier_)
    {
        // Constructor
        setTruncate(_truncate_);

        setTable(_table_);

        setIdentifier(_identifier_);

    }

    @Override
    public Object clone()
    {
        return new ATruncateClausel(
            cloneNode(this._truncate_),
            cloneNode(this._table_),
            cloneNode(this._identifier_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATruncateClausel(this);
    }

    public TTruncate getTruncate()
    {
        return this._truncate_;
    }

    public void setTruncate(TTruncate node)
    {
        if(this._truncate_ != null)
        {
            this._truncate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._truncate_ = node;
    }

    public TTable getTable()
    {
        return this._table_;
    }

    public void setTable(TTable node)
    {
        if(this._table_ != null)
        {
            this._table_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._table_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._truncate_)
            + toString(this._table_)
            + toString(this._identifier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._truncate_ == child)
        {
            this._truncate_ = null;
            return;
        }

        if(this._table_ == child)
        {
            this._table_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._truncate_ == oldChild)
        {
            setTruncate((TTruncate) newChild);
            return;
        }

        if(this._table_ == oldChild)
        {
            setTable((TTable) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
