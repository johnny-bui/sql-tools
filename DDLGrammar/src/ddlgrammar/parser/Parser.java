/* This file was generated by SableCC (http://www.sablecc.org/). */

package ddlgrammar.parser;

import ddlgrammar.lexer.*;
import ddlgrammar.node.*;
import ddlgrammar.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PDdl node1 = (PDdl) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ADdl */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ACreateTable */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAtabledefinition1TableDefinition */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce AAtabledefinition2TableDefinition */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAtabledefinition3TableDefinition */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAtabledefinition4TableDefinition */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAcoldef1ColDef */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AAcoldef2ColDef */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AIntType */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ABigintType */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AFloatType */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce ATimestampType */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce ACharsType */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce AUniqueColConstraint */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ANotNullColConstraint */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce ANotNull */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AAdditionColDef */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AAtableconstraintlist1TableConstraintList */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AAtableconstraintlist2TableConstraintList */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce APrimaryKeyTableConstraint */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AForeignKeyTableConstraint */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce ATableConstraintTail */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce APrimaryKey */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce AForeignKey */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce AAcols1Cols */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list, false);
            }
            break;
            case 25: /* reduce AAcols2Cols */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list, false);
            }
            break;
            case 26: /* reduce AMoreIdentifier */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list, false);
            }
            break;
            case 27: /* reduce AReferencesClausel */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list, false);
            }
            break;
            case 28: /* reduce ATerminal$CreateTable */
            {
                ArrayList<Object> list = new28();
                push(goTo(16), list, true);
            }
            break;
            case 29: /* reduce ANonTerminal$CreateTable */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, true);
            }
            break;
            case 30: /* reduce ATerminal$AdditionColDef */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list, true);
            }
            break;
            case 31: /* reduce ANonTerminal$AdditionColDef */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list, true);
            }
            break;
            case 32: /* reduce ATerminal$TableConstraintTail */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list, true);
            }
            break;
            case 33: /* reduce ANonTerminal$TableConstraintTail */
            {
                ArrayList<Object> list = new33();
                push(goTo(18), list, true);
            }
            break;
            case 34: /* reduce ATerminal$ColConstraint */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list, true);
            }
            break;
            case 35: /* reduce ANonTerminal$ColConstraint */
            {
                ArrayList<Object> list = new35();
                push(goTo(19), list, true);
            }
            break;
            case 36: /* reduce ATerminal$Number */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list, true);
            }
            break;
            case 37: /* reduce ANonTerminal$Number */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list, true);
            }
            break;
            case 38: /* reduce ATerminal$MoreIdentifier */
            {
                ArrayList<Object> list = new38();
                push(goTo(21), list, true);
            }
            break;
            case 39: /* reduce ANonTerminal$MoreIdentifier */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADdl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDdl pddlNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pddlNode1 = new ADdl(listNode3);
        }
	nodeList.add(pddlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ACreateTable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCreateTable pcreatetableNode1;
        {
            // Block
        TCreate tcreateNode2;
        TTable ttableNode3;
        TIf tifNode4;
        TNot tnotNode5;
        TExists texistsNode6;
        TIdentifier tidentifierNode7;
        PTableDefinition ptabledefinitionNode8;
        TSemicolon tsemicolonNode9;
        tcreateNode2 = (TCreate)nodeArrayList1.get(0);
        ttableNode3 = (TTable)nodeArrayList2.get(0);
        tifNode4 = (TIf)nodeArrayList3.get(0);
        tnotNode5 = (TNot)nodeArrayList4.get(0);
        texistsNode6 = (TExists)nodeArrayList5.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList6.get(0);
        ptabledefinitionNode8 = (PTableDefinition)nodeArrayList7.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList8.get(0);

        pcreatetableNode1 = new ACreateTable(tcreateNode2, ttableNode3, tifNode4, tnotNode5, texistsNode6, tidentifierNode7, ptabledefinitionNode8, tsemicolonNode9);
        }
	nodeList.add(pcreatetableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAtabledefinition1TableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableDefinition ptabledefinitionNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trparNode6 = (TRPar)nodeArrayList3.get(0);

        ptabledefinitionNode1 = new ATableDefinition(tlparNode2, pcoldefNode3, listNode4, listNode5, trparNode6);
        }
	nodeList.add(ptabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAtabledefinition2TableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableDefinition ptabledefinitionNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        trparNode7 = (TRPar)nodeArrayList4.get(0);

        ptabledefinitionNode1 = new ATableDefinition(tlparNode2, pcoldefNode3, listNode5, listNode6, trparNode7);
        }
	nodeList.add(ptabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAtabledefinition3TableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableDefinition ptabledefinitionNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList4.get(0);

        ptabledefinitionNode1 = new ATableDefinition(tlparNode2, pcoldefNode3, listNode4, listNode6, trparNode7);
        }
	nodeList.add(ptabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAtabledefinition4TableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableDefinition ptabledefinitionNode1;
        {
            // Block
        TLPar tlparNode2;
        PColDef pcoldefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRPar trparNode8;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        trparNode8 = (TRPar)nodeArrayList5.get(0);

        ptabledefinitionNode1 = new ATableDefinition(tlparNode2, pcoldefNode3, listNode5, listNode7, trparNode8);
        }
	nodeList.add(ptabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAcoldef1ColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        {
            // Block
        }

        pcoldefNode1 = new AColDef(tidentifierNode2, ptypeNode3, listNode4);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAcoldef2ColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColDef pcoldefNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcoldefNode1 = new AColDef(tidentifierNode2, ptypeNode3, listNode5);
        }
	nodeList.add(pcoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintegerNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ABigintType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBigint tbigintNode2;
        tbigintNode2 = (TBigint)nodeArrayList1.get(0);

        ptypeNode1 = new ABigintType(tbigintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFloatType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        ptypeNode1 = new AFloatType(tfloatNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATimestampType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTimestamp ttimestampNode2;
        ttimestampNode2 = (TTimestamp)nodeArrayList1.get(0);

        ptypeNode1 = new ATimestampType(ttimestampNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACharsType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVarchar tvarcharNode2;
        TLPar tlparNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        tvarcharNode2 = (TVarchar)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        ptypeNode1 = new ACharsType(tvarcharNode2, tlparNode3, listNode5, trparNode6);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AUniqueColConstraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColConstraint pcolconstraintNode1;
        {
            // Block
        TUnique tuniqueNode2;
        tuniqueNode2 = (TUnique)nodeArrayList1.get(0);

        pcolconstraintNode1 = new AUniqueColConstraint(tuniqueNode2);
        }
	nodeList.add(pcolconstraintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANotNullColConstraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColConstraint pcolconstraintNode1;
        {
            // Block
        PNotNull pnotnullNode2;
        pnotnullNode2 = (PNotNull)nodeArrayList1.get(0);

        pcolconstraintNode1 = new ANotNullColConstraint(pnotnullNode2);
        }
	nodeList.add(pcolconstraintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANotNull */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNotNull pnotnullNode1;
        {
            // Block
        TNot tnotNode2;
        TNull tnullNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        tnullNode3 = (TNull)nodeArrayList2.get(0);

        pnotnullNode1 = new ANotNull(tnotNode2, tnullNode3);
        }
	nodeList.add(pnotnullNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAdditionColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionColDef padditioncoldefNode1;
        {
            // Block
        TComma tcommaNode2;
        PColDef pcoldefNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pcoldefNode3 = (PColDef)nodeArrayList2.get(0);

        padditioncoldefNode1 = new AAdditionColDef(tcommaNode2, pcoldefNode3);
        }
	nodeList.add(padditioncoldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAtableconstraintlist1TableConstraintList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableConstraintList ptableconstraintlistNode1;
        {
            // Block
        PTableConstraint ptableconstraintNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        ptableconstraintNode2 = (PTableConstraint)nodeArrayList1.get(0);
        {
            // Block
        }

        ptableconstraintlistNode1 = new ATableConstraintList(ptableconstraintNode2, listNode3);
        }
	nodeList.add(ptableconstraintlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAtableconstraintlist2TableConstraintList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableConstraintList ptableconstraintlistNode1;
        {
            // Block
        PTableConstraint ptableconstraintNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptableconstraintNode2 = (PTableConstraint)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptableconstraintlistNode1 = new ATableConstraintList(ptableconstraintNode2, listNode4);
        }
	nodeList.add(ptableconstraintlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce APrimaryKeyTableConstraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableConstraint ptableconstraintNode1;
        {
            // Block
        PPrimaryKey pprimarykeyNode2;
        pprimarykeyNode2 = (PPrimaryKey)nodeArrayList1.get(0);

        ptableconstraintNode1 = new APrimaryKeyTableConstraint(pprimarykeyNode2);
        }
	nodeList.add(ptableconstraintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AForeignKeyTableConstraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableConstraint ptableconstraintNode1;
        {
            // Block
        PForeignKey pforeignkeyNode2;
        pforeignkeyNode2 = (PForeignKey)nodeArrayList1.get(0);

        ptableconstraintNode1 = new AForeignKeyTableConstraint(pforeignkeyNode2);
        }
	nodeList.add(ptableconstraintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ATableConstraintTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableConstraintTail ptableconstrainttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PTableConstraint ptableconstraintNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptableconstraintNode3 = (PTableConstraint)nodeArrayList2.get(0);

        ptableconstrainttailNode1 = new ATableConstraintTail(tcommaNode2, ptableconstraintNode3);
        }
	nodeList.add(ptableconstrainttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce APrimaryKey */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryKey pprimarykeyNode1;
        {
            // Block
        TConstraint tconstraintNode2;
        TIdentifier tidentifierNode3;
        TPrimary tprimaryNode4;
        TKey tkeyNode5;
        TLPar tlparNode6;
        TIdentifier tidentifierNode7;
        TRPar trparNode8;
        tconstraintNode2 = (TConstraint)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tprimaryNode4 = (TPrimary)nodeArrayList3.get(0);
        tkeyNode5 = (TKey)nodeArrayList4.get(0);
        tlparNode6 = (TLPar)nodeArrayList5.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList6.get(0);
        trparNode8 = (TRPar)nodeArrayList7.get(0);

        pprimarykeyNode1 = new APrimaryKey(tconstraintNode2, tidentifierNode3, tprimaryNode4, tkeyNode5, tlparNode6, tidentifierNode7, trparNode8);
        }
	nodeList.add(pprimarykeyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AForeignKey */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForeignKey pforeignkeyNode1;
        {
            // Block
        TConstraint tconstraintNode2;
        TIdentifier tidentifierNode3;
        TForeign tforeignNode4;
        TKey tkeyNode5;
        TLPar tlparNode6;
        PCols pcolsNode7;
        TRPar trparNode8;
        PReferencesClausel preferencesclauselNode9;
        tconstraintNode2 = (TConstraint)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tforeignNode4 = (TForeign)nodeArrayList3.get(0);
        tkeyNode5 = (TKey)nodeArrayList4.get(0);
        tlparNode6 = (TLPar)nodeArrayList5.get(0);
        pcolsNode7 = (PCols)nodeArrayList6.get(0);
        trparNode8 = (TRPar)nodeArrayList7.get(0);
        preferencesclauselNode9 = (PReferencesClausel)nodeArrayList8.get(0);

        pforeignkeyNode1 = new AForeignKey(tconstraintNode2, tidentifierNode3, tforeignNode4, tkeyNode5, tlparNode6, pcolsNode7, trparNode8, preferencesclauselNode9);
        }
	nodeList.add(pforeignkeyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAcols1Cols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCols pcolsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pcolsNode1 = new ACols(tidentifierNode2, listNode3);
        }
	nodeList.add(pcolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAcols2Cols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCols pcolsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcolsNode1 = new ACols(tidentifierNode2, listNode4);
        }
	nodeList.add(pcolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMoreIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreIdentifier pmoreidentifierNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pmoreidentifierNode1 = new AMoreIdentifier(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(pmoreidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AReferencesClausel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReferencesClausel preferencesclauselNode1;
        {
            // Block
        TReferences treferencesNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PCols pcolsNode5;
        TRPar trparNode6;
        treferencesNode2 = (TReferences)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pcolsNode5 = (PCols)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        preferencesclauselNode1 = new AReferencesClausel(treferencesNode2, tidentifierNode3, tlparNode4, pcolsNode5, trparNode6);
        }
	nodeList.add(preferencesclauselNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ATerminal$CreateTable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCreateTable pcreatetableNode1;
        pcreatetableNode1 = (PCreateTable)nodeArrayList1.get(0);
	if(pcreatetableNode1 != null)
	{
	  listNode2.add(pcreatetableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ANonTerminal$CreateTable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCreateTable pcreatetableNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcreatetableNode2 = (PCreateTable)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcreatetableNode2 != null)
	{
	  listNode3.add(pcreatetableNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ATerminal$AdditionColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionColDef padditioncoldefNode1;
        padditioncoldefNode1 = (PAdditionColDef)nodeArrayList1.get(0);
	if(padditioncoldefNode1 != null)
	{
	  listNode2.add(padditioncoldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANonTerminal$AdditionColDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionColDef padditioncoldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditioncoldefNode2 = (PAdditionColDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditioncoldefNode2 != null)
	{
	  listNode3.add(padditioncoldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ATerminal$TableConstraintTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PTableConstraintTail ptableconstrainttailNode1;
        ptableconstrainttailNode1 = (PTableConstraintTail)nodeArrayList1.get(0);
	if(ptableconstrainttailNode1 != null)
	{
	  listNode2.add(ptableconstrainttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANonTerminal$TableConstraintTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PTableConstraintTail ptableconstrainttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptableconstrainttailNode2 = (PTableConstraintTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptableconstrainttailNode2 != null)
	{
	  listNode3.add(ptableconstrainttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ATerminal$ColConstraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PColConstraint pcolconstraintNode1;
        pcolconstraintNode1 = (PColConstraint)nodeArrayList1.get(0);
	if(pcolconstraintNode1 != null)
	{
	  listNode2.add(pcolconstraintNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ANonTerminal$ColConstraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PColConstraint pcolconstraintNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcolconstraintNode2 = (PColConstraint)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcolconstraintNode2 != null)
	{
	  listNode3.add(pcolconstraintNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ATerminal$Number */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNumber tnumberNode1;
        tnumberNode1 = (TNumber)nodeArrayList1.get(0);
	if(tnumberNode1 != null)
	{
	  listNode2.add(tnumberNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANonTerminal$Number */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNumber tnumberNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnumberNode2 = (TNumber)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnumberNode2 != null)
	{
	  listNode3.add(tnumberNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ATerminal$MoreIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMoreIdentifier pmoreidentifierNode1;
        pmoreidentifierNode1 = (PMoreIdentifier)nodeArrayList1.get(0);
	if(pmoreidentifierNode1 != null)
	{
	  listNode2.add(pmoreidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANonTerminal$MoreIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMoreIdentifier pmoreidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoreidentifierNode2 = (PMoreIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoreidentifierNode2 != null)
	{
	  listNode3.add(pmoreidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 1}, {6, SHIFT, 5}, },
			{{-1, ERROR, 2}, {23, ACCEPT, -1}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 5}, {7, SHIFT, 7}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 7}, {19, SHIFT, 8}, },
			{{-1, ERROR, 8}, {8, SHIFT, 9}, },
			{{-1, ERROR, 9}, {22, SHIFT, 10}, },
			{{-1, ERROR, 10}, {1, SHIFT, 11}, },
			{{-1, ERROR, 11}, {22, SHIFT, 13}, },
			{{-1, ERROR, 12}, {4, SHIFT, 15}, },
			{{-1, ERROR, 13}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, },
			{{-1, ERROR, 14}, {2, SHIFT, 22}, {3, SHIFT, 23}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 20}, {1, SHIFT, 28}, },
			{{-1, REDUCE, 6}, {18, SHIFT, 29}, {19, SHIFT, 30}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 23}, {14, SHIFT, 34}, {22, SHIFT, 13}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 26}, {2, SHIFT, 39}, {3, SHIFT, 23}, },
			{{-1, ERROR, 27}, {2, SHIFT, 42}, {3, SHIFT, 43}, },
			{{-1, ERROR, 28}, {0, SHIFT, 45}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 30}, {20, SHIFT, 47}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 7}, {18, SHIFT, 29}, {19, SHIFT, 30}, },
			{{-1, ERROR, 34}, {22, SHIFT, 49}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 41}, {2, SHIFT, 50}, {3, SHIFT, 43}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 43}, {14, SHIFT, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 46}, {0, SHIFT, 51}, {2, SHIFT, 52}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 49}, {15, SHIFT, 53}, {16, SHIFT, 54}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 53}, {17, SHIFT, 55}, },
			{{-1, ERROR, 54}, {17, SHIFT, 56}, },
			{{-1, ERROR, 55}, {1, SHIFT, 57}, },
			{{-1, ERROR, 56}, {1, SHIFT, 58}, },
			{{-1, ERROR, 57}, {22, SHIFT, 59}, },
			{{-1, ERROR, 58}, {22, SHIFT, 61}, },
			{{-1, REDUCE, 24}, {3, SHIFT, 62}, },
			{{-1, ERROR, 60}, {2, SHIFT, 65}, },
			{{-1, ERROR, 61}, {2, SHIFT, 66}, },
			{{-1, ERROR, 62}, {22, SHIFT, 67}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 25}, {3, SHIFT, 62}, },
			{{-1, ERROR, 65}, {21, SHIFT, 69}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 69}, {22, SHIFT, 71}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 71}, {1, SHIFT, 72}, },
			{{-1, ERROR, 72}, {22, SHIFT, 59}, },
			{{-1, ERROR, 73}, {2, SHIFT, 74}, },
			{{-1, REDUCE, 27}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 6}, },
			{{-1, 12}, },
			{{-1, 14}, {23, 35}, },
			{{-1, 21}, },
			{{-1, 31}, {33, 48}, },
			{{-1, 32}, },
			{{-1, 24}, {26, 40}, },
			{{-1, -1}, },
			{{-1, 36}, },
			{{-1, 25}, {27, 44}, {41, 44}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 60}, {72, 73}, },
			{{-1, 63}, {64, 68}, },
			{{-1, 70}, },
			{{-1, 4}, },
			{{-1, 26}, },
			{{-1, 27}, {26, 41}, },
			{{-1, 33}, },
			{{-1, 46}, },
			{{-1, 64}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'CREATE'",
			"expecting: 'TABLE'",
			"expecting: EOF",
			"expecting: 'CREATE', EOF",
			"expecting: 'IF'",
			"expecting: not",
			"expecting: 'EXISTS'",
			"expecting: identifier",
			"expecting: '('",
			"expecting: ';'",
			"expecting: 'integer', 'bigint', 'float', 'timestamp', 'varchar'",
			"expecting: ')', ','",
			"expecting: ')', ',', 'unique', not",
			"expecting: 'constraint', identifier",
			"expecting: number",
			"expecting: 'null'",
			"expecting: 'constraint'",
			"expecting: number, ')'",
			"expecting: 'foreign', 'primary'",
			"expecting: 'key'",
			"expecting: ')'",
			"expecting: 'references'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 3, 5, 6, 7, 8, 7, 9, 10, 11, 3, 12, 12, 12, 12, 8, 12, 9, 13, 11, 11, 11, 11, 14, 12, 15, 12, 12, 12, 7, 11, 11, 11, 11, 9, 11, 11, 9, 16, 11, 17, 17, 12, 12, 18, 9, 17, 12, 19, 19, 8, 8, 7, 7, 11, 20, 20, 7, 11, 11, 21, 11, 11, 11, 7, 11, 8, 7, 20, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
